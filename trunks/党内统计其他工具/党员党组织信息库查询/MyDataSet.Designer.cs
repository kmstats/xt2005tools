//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4016
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace com.echo.XT2007 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MyDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MyDataSet : global::System.Data.DataSet {
        
        private A01DataTable tableA01;
        
        private D01DataTable tableD01;
        
        private D16DataTable tableD16;
        
        private UserDataTable tableUser;
        
        private Dict_TableDataTable tableDict_Table;
        
        private Dict_ColumnDataTable tableDict_Column;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MyDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MyDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["A01"] != null)) {
                    base.Tables.Add(new A01DataTable(ds.Tables["A01"]));
                }
                if ((ds.Tables["D01"] != null)) {
                    base.Tables.Add(new D01DataTable(ds.Tables["D01"]));
                }
                if ((ds.Tables["D16"] != null)) {
                    base.Tables.Add(new D16DataTable(ds.Tables["D16"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Dict_Table"] != null)) {
                    base.Tables.Add(new Dict_TableDataTable(ds.Tables["Dict_Table"]));
                }
                if ((ds.Tables["Dict_Column"] != null)) {
                    base.Tables.Add(new Dict_ColumnDataTable(ds.Tables["Dict_Column"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public A01DataTable A01 {
            get {
                return this.tableA01;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public D01DataTable D01 {
            get {
                return this.tableD01;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public D16DataTable D16 {
            get {
                return this.tableD16;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Dict_TableDataTable Dict_Table {
            get {
                return this.tableDict_Table;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Dict_ColumnDataTable Dict_Column {
            get {
                return this.tableDict_Column;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MyDataSet cln = ((MyDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["A01"] != null)) {
                    base.Tables.Add(new A01DataTable(ds.Tables["A01"]));
                }
                if ((ds.Tables["D01"] != null)) {
                    base.Tables.Add(new D01DataTable(ds.Tables["D01"]));
                }
                if ((ds.Tables["D16"] != null)) {
                    base.Tables.Add(new D16DataTable(ds.Tables["D16"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Dict_Table"] != null)) {
                    base.Tables.Add(new Dict_TableDataTable(ds.Tables["Dict_Table"]));
                }
                if ((ds.Tables["Dict_Column"] != null)) {
                    base.Tables.Add(new Dict_ColumnDataTable(ds.Tables["Dict_Column"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableA01 = ((A01DataTable)(base.Tables["A01"]));
            if ((initTable == true)) {
                if ((this.tableA01 != null)) {
                    this.tableA01.InitVars();
                }
            }
            this.tableD01 = ((D01DataTable)(base.Tables["D01"]));
            if ((initTable == true)) {
                if ((this.tableD01 != null)) {
                    this.tableD01.InitVars();
                }
            }
            this.tableD16 = ((D16DataTable)(base.Tables["D16"]));
            if ((initTable == true)) {
                if ((this.tableD16 != null)) {
                    this.tableD16.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableDict_Table = ((Dict_TableDataTable)(base.Tables["Dict_Table"]));
            if ((initTable == true)) {
                if ((this.tableDict_Table != null)) {
                    this.tableDict_Table.InitVars();
                }
            }
            this.tableDict_Column = ((Dict_ColumnDataTable)(base.Tables["Dict_Column"]));
            if ((initTable == true)) {
                if ((this.tableDict_Column != null)) {
                    this.tableDict_Column.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MyDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MyDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableA01 = new A01DataTable();
            base.Tables.Add(this.tableA01);
            this.tableD01 = new D01DataTable();
            base.Tables.Add(this.tableD01);
            this.tableD16 = new D16DataTable();
            base.Tables.Add(this.tableD16);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableDict_Table = new Dict_TableDataTable();
            base.Tables.Add(this.tableDict_Table);
            this.tableDict_Column = new Dict_ColumnDataTable();
            base.Tables.Add(this.tableDict_Column);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeA01() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeD01() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeD16() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDict_Table() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDict_Column() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MyDataSet ds = new MyDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void A01RowChangeEventHandler(object sender, A01RowChangeEvent e);
        
        public delegate void D01RowChangeEventHandler(object sender, D01RowChangeEvent e);
        
        public delegate void D16RowChangeEventHandler(object sender, D16RowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void Dict_TableRowChangeEventHandler(object sender, Dict_TableRowChangeEvent e);
        
        public delegate void Dict_ColumnRowChangeEventHandler(object sender, Dict_ColumnRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class A01DataTable : global::System.Data.TypedTableBase<A01Row> {
            
            private global::System.Data.DataColumn columnA0000;
            
            private global::System.Data.DataColumn columnA0101;
            
            private global::System.Data.DataColumn columnA0104;
            
            private global::System.Data.DataColumn columnA0107;
            
            private global::System.Data.DataColumn columnA0107A;
            
            private global::System.Data.DataColumn columnA0111;
            
            private global::System.Data.DataColumn columnA0117;
            
            private global::System.Data.DataColumn columnA0134;
            
            private global::System.Data.DataColumn columnA0141;
            
            private global::System.Data.DataColumn columnA0159;
            
            private global::System.Data.DataColumn columnA0160;
            
            private global::System.Data.DataColumn columnA0162;
            
            private global::System.Data.DataColumn columnA0184;
            
            private global::System.Data.DataColumn columnAKKY;
            
            private global::System.Data.DataColumn columnA0198A;
            
            private global::System.Data.DataColumn columnA0198B;
            
            private global::System.Data.DataColumn columnA0198C;
            
            private global::System.Data.DataColumn columnSORTID;
            
            private global::System.Data.DataColumn columnA0193;
            
            private global::System.Data.DataColumn columnA0121;
            
            private global::System.Data.DataColumn columnA0124;
            
            private global::System.Data.DataColumn columnA0181;
            
            private global::System.Data.DataColumn columnA0144;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01DataTable() {
                this.TableName = "A01";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal A01DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected A01DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0000Column {
                get {
                    return this.columnA0000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0101Column {
                get {
                    return this.columnA0101;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0104Column {
                get {
                    return this.columnA0104;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0107Column {
                get {
                    return this.columnA0107;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0107AColumn {
                get {
                    return this.columnA0107A;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0111Column {
                get {
                    return this.columnA0111;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0117Column {
                get {
                    return this.columnA0117;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0134Column {
                get {
                    return this.columnA0134;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0141Column {
                get {
                    return this.columnA0141;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0159Column {
                get {
                    return this.columnA0159;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0160Column {
                get {
                    return this.columnA0160;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0162Column {
                get {
                    return this.columnA0162;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0184Column {
                get {
                    return this.columnA0184;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AKKYColumn {
                get {
                    return this.columnAKKY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0198AColumn {
                get {
                    return this.columnA0198A;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0198BColumn {
                get {
                    return this.columnA0198B;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0198CColumn {
                get {
                    return this.columnA0198C;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SORTIDColumn {
                get {
                    return this.columnSORTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0193Column {
                get {
                    return this.columnA0193;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0121Column {
                get {
                    return this.columnA0121;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0124Column {
                get {
                    return this.columnA0124;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0181Column {
                get {
                    return this.columnA0181;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn A0144Column {
                get {
                    return this.columnA0144;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01Row this[int index] {
                get {
                    return ((A01Row)(this.Rows[index]));
                }
            }
            
            public event A01RowChangeEventHandler A01RowChanging;
            
            public event A01RowChangeEventHandler A01RowChanged;
            
            public event A01RowChangeEventHandler A01RowDeleting;
            
            public event A01RowChangeEventHandler A01RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddA01Row(A01Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01Row AddA01Row(
                        string A0000, 
                        string A0101, 
                        string A0104, 
                        string A0107, 
                        string A0107A, 
                        string A0111, 
                        string A0117, 
                        string A0134, 
                        string A0141, 
                        string A0159, 
                        string A0160, 
                        string A0162, 
                        string A0184, 
                        string AKKY, 
                        string A0198A, 
                        string A0198B, 
                        string A0198C, 
                        int SORTID, 
                        double A0193, 
                        string A0121, 
                        string A0124, 
                        string A0181, 
                        string A0144) {
                A01Row rowA01Row = ((A01Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        A0000,
                        A0101,
                        A0104,
                        A0107,
                        A0107A,
                        A0111,
                        A0117,
                        A0134,
                        A0141,
                        A0159,
                        A0160,
                        A0162,
                        A0184,
                        AKKY,
                        A0198A,
                        A0198B,
                        A0198C,
                        SORTID,
                        A0193,
                        A0121,
                        A0124,
                        A0181,
                        A0144};
                rowA01Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowA01Row);
                return rowA01Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01Row FindByA0000(string A0000) {
                return ((A01Row)(this.Rows.Find(new object[] {
                            A0000})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                A01DataTable cln = ((A01DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new A01DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnA0000 = base.Columns["A0000"];
                this.columnA0101 = base.Columns["A0101"];
                this.columnA0104 = base.Columns["A0104"];
                this.columnA0107 = base.Columns["A0107"];
                this.columnA0107A = base.Columns["A0107A"];
                this.columnA0111 = base.Columns["A0111"];
                this.columnA0117 = base.Columns["A0117"];
                this.columnA0134 = base.Columns["A0134"];
                this.columnA0141 = base.Columns["A0141"];
                this.columnA0159 = base.Columns["A0159"];
                this.columnA0160 = base.Columns["A0160"];
                this.columnA0162 = base.Columns["A0162"];
                this.columnA0184 = base.Columns["A0184"];
                this.columnAKKY = base.Columns["AKKY"];
                this.columnA0198A = base.Columns["A0198A"];
                this.columnA0198B = base.Columns["A0198B"];
                this.columnA0198C = base.Columns["A0198C"];
                this.columnSORTID = base.Columns["SORTID"];
                this.columnA0193 = base.Columns["A0193"];
                this.columnA0121 = base.Columns["A0121"];
                this.columnA0124 = base.Columns["A0124"];
                this.columnA0181 = base.Columns["A0181"];
                this.columnA0144 = base.Columns["A0144"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnA0000 = new global::System.Data.DataColumn("A0000", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0000);
                this.columnA0101 = new global::System.Data.DataColumn("A0101", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0101);
                this.columnA0104 = new global::System.Data.DataColumn("A0104", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0104);
                this.columnA0107 = new global::System.Data.DataColumn("A0107", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0107);
                this.columnA0107A = new global::System.Data.DataColumn("A0107A", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0107A);
                this.columnA0111 = new global::System.Data.DataColumn("A0111", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0111);
                this.columnA0117 = new global::System.Data.DataColumn("A0117", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0117);
                this.columnA0134 = new global::System.Data.DataColumn("A0134", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0134);
                this.columnA0141 = new global::System.Data.DataColumn("A0141", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0141);
                this.columnA0159 = new global::System.Data.DataColumn("A0159", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0159);
                this.columnA0160 = new global::System.Data.DataColumn("A0160", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0160);
                this.columnA0162 = new global::System.Data.DataColumn("A0162", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0162);
                this.columnA0184 = new global::System.Data.DataColumn("A0184", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0184);
                this.columnAKKY = new global::System.Data.DataColumn("AKKY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAKKY);
                this.columnA0198A = new global::System.Data.DataColumn("A0198A", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0198A);
                this.columnA0198B = new global::System.Data.DataColumn("A0198B", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0198B);
                this.columnA0198C = new global::System.Data.DataColumn("A0198C", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0198C);
                this.columnSORTID = new global::System.Data.DataColumn("SORTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTID);
                this.columnA0193 = new global::System.Data.DataColumn("A0193", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0193);
                this.columnA0121 = new global::System.Data.DataColumn("A0121", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0121);
                this.columnA0124 = new global::System.Data.DataColumn("A0124", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0124);
                this.columnA0181 = new global::System.Data.DataColumn("A0181", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0181);
                this.columnA0144 = new global::System.Data.DataColumn("A0144", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnA0144);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnA0000}, true));
                this.columnA0000.AllowDBNull = false;
                this.columnA0000.Unique = true;
                this.columnA0000.MaxLength = 50;
                this.columnA0101.MaxLength = 100;
                this.columnA0104.MaxLength = 9;
                this.columnA0107.AllowDBNull = false;
                this.columnA0107.MaxLength = 8;
                this.columnA0107A.MaxLength = 8;
                this.columnA0111.MaxLength = 9;
                this.columnA0117.MaxLength = 9;
                this.columnA0134.MaxLength = 8;
                this.columnA0141.MaxLength = 9;
                this.columnA0159.MaxLength = 9;
                this.columnA0160.MaxLength = 68;
                this.columnA0162.MaxLength = 70;
                this.columnA0184.MaxLength = 18;
                this.columnAKKY.MaxLength = 30;
                this.columnA0198A.MaxLength = 200;
                this.columnA0198B.MaxLength = 200;
                this.columnA0198C.MaxLength = 200;
                this.columnA0121.MaxLength = 100;
                this.columnA0124.MaxLength = 30;
                this.columnA0181.MaxLength = 200;
                this.columnA0144.MaxLength = 8;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01Row NewA01Row() {
                return ((A01Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new A01Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(A01Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.A01RowChanged != null)) {
                    this.A01RowChanged(this, new A01RowChangeEvent(((A01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.A01RowChanging != null)) {
                    this.A01RowChanging(this, new A01RowChangeEvent(((A01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.A01RowDeleted != null)) {
                    this.A01RowDeleted(this, new A01RowChangeEvent(((A01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.A01RowDeleting != null)) {
                    this.A01RowDeleting(this, new A01RowChangeEvent(((A01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveA01Row(A01Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "A01DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class D01DataTable : global::System.Data.TypedTableBase<D01Row> {
            
            private global::System.Data.DataColumn columnD0101;
            
            private global::System.Data.DataColumn columnD0107;
            
            private global::System.Data.DataColumn columnD0111;
            
            private global::System.Data.DataColumn columnD0121;
            
            private global::System.Data.DataColumn columnD0123;
            
            private global::System.Data.DataColumn columnD0127;
            
            private global::System.Data.DataColumn columnD0127A;
            
            private global::System.Data.DataColumn columnD0144;
            
            private global::System.Data.DataColumn columnD0165;
            
            private global::System.Data.DataColumn columnD0168;
            
            private global::System.Data.DataColumn columnD0171;
            
            private global::System.Data.DataColumn columnD0174;
            
            private global::System.Data.DataColumn columnD0177;
            
            private global::System.Data.DataColumn columnD0181;
            
            private global::System.Data.DataColumn columnD0184;
            
            private global::System.Data.DataColumn columnSORTID;
            
            private global::System.Data.DataColumn columnD0191;
            
            private global::System.Data.DataColumn columnD0199;
            
            private global::System.Data.DataColumn columnD0179;
            
            private global::System.Data.DataColumn columnD0193;
            
            private global::System.Data.DataColumn columnD0194;
            
            private global::System.Data.DataColumn columnD0178;
            
            private global::System.Data.DataColumn columnD0192;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01DataTable() {
                this.TableName = "D01";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal D01DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected D01DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0101Column {
                get {
                    return this.columnD0101;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0107Column {
                get {
                    return this.columnD0107;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0111Column {
                get {
                    return this.columnD0111;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0121Column {
                get {
                    return this.columnD0121;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0123Column {
                get {
                    return this.columnD0123;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0127Column {
                get {
                    return this.columnD0127;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0127AColumn {
                get {
                    return this.columnD0127A;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0144Column {
                get {
                    return this.columnD0144;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0165Column {
                get {
                    return this.columnD0165;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0168Column {
                get {
                    return this.columnD0168;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0171Column {
                get {
                    return this.columnD0171;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0174Column {
                get {
                    return this.columnD0174;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0177Column {
                get {
                    return this.columnD0177;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0181Column {
                get {
                    return this.columnD0181;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0184Column {
                get {
                    return this.columnD0184;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SORTIDColumn {
                get {
                    return this.columnSORTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0191Column {
                get {
                    return this.columnD0191;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0199Column {
                get {
                    return this.columnD0199;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0179Column {
                get {
                    return this.columnD0179;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0193Column {
                get {
                    return this.columnD0193;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0194Column {
                get {
                    return this.columnD0194;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0178Column {
                get {
                    return this.columnD0178;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0192Column {
                get {
                    return this.columnD0192;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01Row this[int index] {
                get {
                    return ((D01Row)(this.Rows[index]));
                }
            }
            
            public event D01RowChangeEventHandler D01RowChanging;
            
            public event D01RowChangeEventHandler D01RowChanged;
            
            public event D01RowChangeEventHandler D01RowDeleting;
            
            public event D01RowChangeEventHandler D01RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddD01Row(D01Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01Row AddD01Row(
                        string D0101, 
                        string D0107, 
                        string D0111, 
                        string D0121, 
                        string D0123, 
                        string D0127, 
                        string D0127A, 
                        string D0144, 
                        string D0165, 
                        string D0168, 
                        string D0171, 
                        string D0174, 
                        string D0177, 
                        string D0181, 
                        string D0184, 
                        string SORTID, 
                        string D0191, 
                        string D0199, 
                        int D0179, 
                        string D0193, 
                        string D0194, 
                        int D0178, 
                        string D0192) {
                D01Row rowD01Row = ((D01Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        D0101,
                        D0107,
                        D0111,
                        D0121,
                        D0123,
                        D0127,
                        D0127A,
                        D0144,
                        D0165,
                        D0168,
                        D0171,
                        D0174,
                        D0177,
                        D0181,
                        D0184,
                        SORTID,
                        D0191,
                        D0199,
                        D0179,
                        D0193,
                        D0194,
                        D0178,
                        D0192};
                rowD01Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowD01Row);
                return rowD01Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01Row FindByD0107(string D0107) {
                return ((D01Row)(this.Rows.Find(new object[] {
                            D0107})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                D01DataTable cln = ((D01DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new D01DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnD0101 = base.Columns["D0101"];
                this.columnD0107 = base.Columns["D0107"];
                this.columnD0111 = base.Columns["D0111"];
                this.columnD0121 = base.Columns["D0121"];
                this.columnD0123 = base.Columns["D0123"];
                this.columnD0127 = base.Columns["D0127"];
                this.columnD0127A = base.Columns["D0127A"];
                this.columnD0144 = base.Columns["D0144"];
                this.columnD0165 = base.Columns["D0165"];
                this.columnD0168 = base.Columns["D0168"];
                this.columnD0171 = base.Columns["D0171"];
                this.columnD0174 = base.Columns["D0174"];
                this.columnD0177 = base.Columns["D0177"];
                this.columnD0181 = base.Columns["D0181"];
                this.columnD0184 = base.Columns["D0184"];
                this.columnSORTID = base.Columns["SORTID"];
                this.columnD0191 = base.Columns["D0191"];
                this.columnD0199 = base.Columns["D0199"];
                this.columnD0179 = base.Columns["D0179"];
                this.columnD0193 = base.Columns["D0193"];
                this.columnD0194 = base.Columns["D0194"];
                this.columnD0178 = base.Columns["D0178"];
                this.columnD0192 = base.Columns["D0192"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnD0101 = new global::System.Data.DataColumn("D0101", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0101);
                this.columnD0107 = new global::System.Data.DataColumn("D0107", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0107);
                this.columnD0111 = new global::System.Data.DataColumn("D0111", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0111);
                this.columnD0121 = new global::System.Data.DataColumn("D0121", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0121);
                this.columnD0123 = new global::System.Data.DataColumn("D0123", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0123);
                this.columnD0127 = new global::System.Data.DataColumn("D0127", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0127);
                this.columnD0127A = new global::System.Data.DataColumn("D0127A", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0127A);
                this.columnD0144 = new global::System.Data.DataColumn("D0144", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0144);
                this.columnD0165 = new global::System.Data.DataColumn("D0165", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0165);
                this.columnD0168 = new global::System.Data.DataColumn("D0168", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0168);
                this.columnD0171 = new global::System.Data.DataColumn("D0171", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0171);
                this.columnD0174 = new global::System.Data.DataColumn("D0174", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0174);
                this.columnD0177 = new global::System.Data.DataColumn("D0177", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0177);
                this.columnD0181 = new global::System.Data.DataColumn("D0181", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0181);
                this.columnD0184 = new global::System.Data.DataColumn("D0184", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0184);
                this.columnSORTID = new global::System.Data.DataColumn("SORTID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTID);
                this.columnD0191 = new global::System.Data.DataColumn("D0191", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0191);
                this.columnD0199 = new global::System.Data.DataColumn("D0199", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0199);
                this.columnD0179 = new global::System.Data.DataColumn("D0179", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0179);
                this.columnD0193 = new global::System.Data.DataColumn("D0193", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0193);
                this.columnD0194 = new global::System.Data.DataColumn("D0194", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0194);
                this.columnD0178 = new global::System.Data.DataColumn("D0178", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0178);
                this.columnD0192 = new global::System.Data.DataColumn("D0192", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0192);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnD0107}, true));
                this.columnD0101.MaxLength = 70;
                this.columnD0107.AllowDBNull = false;
                this.columnD0107.Unique = true;
                this.columnD0107.MaxLength = 68;
                this.columnD0111.MaxLength = 70;
                this.columnD0121.MaxLength = 9;
                this.columnD0123.MaxLength = 9;
                this.columnD0127.AllowDBNull = false;
                this.columnD0127.MaxLength = 68;
                this.columnD0127A.MaxLength = 70;
                this.columnD0144.MaxLength = 8;
                this.columnD0165.MaxLength = 1;
                this.columnD0168.MaxLength = 1;
                this.columnD0171.MaxLength = 8;
                this.columnD0174.MaxLength = 68;
                this.columnD0177.MaxLength = 8;
                this.columnD0181.MaxLength = 8;
                this.columnD0184.MaxLength = 8;
                this.columnSORTID.MaxLength = 50;
                this.columnD0191.MaxLength = 100;
                this.columnD0199.MaxLength = 1000;
                this.columnD0193.MaxLength = 12;
                this.columnD0194.MaxLength = 12;
                this.columnD0192.MaxLength = 6;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01Row NewD01Row() {
                return ((D01Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new D01Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(D01Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.D01RowChanged != null)) {
                    this.D01RowChanged(this, new D01RowChangeEvent(((D01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.D01RowChanging != null)) {
                    this.D01RowChanging(this, new D01RowChangeEvent(((D01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.D01RowDeleted != null)) {
                    this.D01RowDeleted(this, new D01RowChangeEvent(((D01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.D01RowDeleting != null)) {
                    this.D01RowDeleting(this, new D01RowChangeEvent(((D01Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveD01Row(D01Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "D01DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class D16DataTable : global::System.Data.TypedTableBase<D16Row> {
            
            private global::System.Data.DataColumn columnD0107;
            
            private global::System.Data.DataColumn columnD1601;
            
            private global::System.Data.DataColumn columnD1601A;
            
            private global::System.Data.DataColumn columnD1624;
            
            private global::System.Data.DataColumn columnD1631;
            
            private global::System.Data.DataColumn columnD1634;
            
            private global::System.Data.DataColumn columnD1660;
            
            private global::System.Data.DataColumn columnD1661;
            
            private global::System.Data.DataColumn columnD1664;
            
            private global::System.Data.DataColumn columnD1671;
            
            private global::System.Data.DataColumn columnD1674;
            
            private global::System.Data.DataColumn columnD1677;
            
            private global::System.Data.DataColumn columnD1681;
            
            private global::System.Data.DataColumn columnD1687;
            
            private global::System.Data.DataColumn columnD1699;
            
            private global::System.Data.DataColumn columnD1684;
            
            private global::System.Data.DataColumn columnD1691;
            
            private global::System.Data.DataColumn columnD1694;
            
            private global::System.Data.DataColumn columnD1697;
            
            private global::System.Data.DataColumn columnSORTID;
            
            private global::System.Data.DataColumn columnD1689;
            
            private global::System.Data.DataColumn columnD1692;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16DataTable() {
                this.TableName = "D16";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal D16DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected D16DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D0107Column {
                get {
                    return this.columnD0107;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1601Column {
                get {
                    return this.columnD1601;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1601AColumn {
                get {
                    return this.columnD1601A;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1624Column {
                get {
                    return this.columnD1624;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1631Column {
                get {
                    return this.columnD1631;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1634Column {
                get {
                    return this.columnD1634;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1660Column {
                get {
                    return this.columnD1660;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1661Column {
                get {
                    return this.columnD1661;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1664Column {
                get {
                    return this.columnD1664;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1671Column {
                get {
                    return this.columnD1671;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1674Column {
                get {
                    return this.columnD1674;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1677Column {
                get {
                    return this.columnD1677;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1681Column {
                get {
                    return this.columnD1681;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1687Column {
                get {
                    return this.columnD1687;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1699Column {
                get {
                    return this.columnD1699;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1684Column {
                get {
                    return this.columnD1684;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1691Column {
                get {
                    return this.columnD1691;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1694Column {
                get {
                    return this.columnD1694;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1697Column {
                get {
                    return this.columnD1697;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SORTIDColumn {
                get {
                    return this.columnSORTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1689Column {
                get {
                    return this.columnD1689;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D1692Column {
                get {
                    return this.columnD1692;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16Row this[int index] {
                get {
                    return ((D16Row)(this.Rows[index]));
                }
            }
            
            public event D16RowChangeEventHandler D16RowChanging;
            
            public event D16RowChangeEventHandler D16RowChanged;
            
            public event D16RowChangeEventHandler D16RowDeleting;
            
            public event D16RowChangeEventHandler D16RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddD16Row(D16Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16Row AddD16Row(
                        string D0107, 
                        string D1601, 
                        string D1601A, 
                        string D1624, 
                        string D1631, 
                        string D1634, 
                        string D1660, 
                        string D1661, 
                        string D1664, 
                        string D1671, 
                        string D1674, 
                        string D1677, 
                        string D1681, 
                        string D1687, 
                        string D1699, 
                        string D1684, 
                        int D1691, 
                        int D1694, 
                        int D1697, 
                        int SORTID, 
                        string D1689, 
                        int D1692) {
                D16Row rowD16Row = ((D16Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        D0107,
                        D1601,
                        D1601A,
                        D1624,
                        D1631,
                        D1634,
                        D1660,
                        D1661,
                        D1664,
                        D1671,
                        D1674,
                        D1677,
                        D1681,
                        D1687,
                        D1699,
                        D1684,
                        D1691,
                        D1694,
                        D1697,
                        SORTID,
                        D1689,
                        D1692};
                rowD16Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowD16Row);
                return rowD16Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16Row FindByD0107D1601A(string D0107, string D1601A) {
                return ((D16Row)(this.Rows.Find(new object[] {
                            D0107,
                            D1601A})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                D16DataTable cln = ((D16DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new D16DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnD0107 = base.Columns["D0107"];
                this.columnD1601 = base.Columns["D1601"];
                this.columnD1601A = base.Columns["D1601A"];
                this.columnD1624 = base.Columns["D1624"];
                this.columnD1631 = base.Columns["D1631"];
                this.columnD1634 = base.Columns["D1634"];
                this.columnD1660 = base.Columns["D1660"];
                this.columnD1661 = base.Columns["D1661"];
                this.columnD1664 = base.Columns["D1664"];
                this.columnD1671 = base.Columns["D1671"];
                this.columnD1674 = base.Columns["D1674"];
                this.columnD1677 = base.Columns["D1677"];
                this.columnD1681 = base.Columns["D1681"];
                this.columnD1687 = base.Columns["D1687"];
                this.columnD1699 = base.Columns["D1699"];
                this.columnD1684 = base.Columns["D1684"];
                this.columnD1691 = base.Columns["D1691"];
                this.columnD1694 = base.Columns["D1694"];
                this.columnD1697 = base.Columns["D1697"];
                this.columnSORTID = base.Columns["SORTID"];
                this.columnD1689 = base.Columns["D1689"];
                this.columnD1692 = base.Columns["D1692"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnD0107 = new global::System.Data.DataColumn("D0107", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD0107);
                this.columnD1601 = new global::System.Data.DataColumn("D1601", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1601);
                this.columnD1601A = new global::System.Data.DataColumn("D1601A", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1601A);
                this.columnD1624 = new global::System.Data.DataColumn("D1624", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1624);
                this.columnD1631 = new global::System.Data.DataColumn("D1631", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1631);
                this.columnD1634 = new global::System.Data.DataColumn("D1634", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1634);
                this.columnD1660 = new global::System.Data.DataColumn("D1660", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1660);
                this.columnD1661 = new global::System.Data.DataColumn("D1661", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1661);
                this.columnD1664 = new global::System.Data.DataColumn("D1664", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1664);
                this.columnD1671 = new global::System.Data.DataColumn("D1671", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1671);
                this.columnD1674 = new global::System.Data.DataColumn("D1674", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1674);
                this.columnD1677 = new global::System.Data.DataColumn("D1677", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1677);
                this.columnD1681 = new global::System.Data.DataColumn("D1681", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1681);
                this.columnD1687 = new global::System.Data.DataColumn("D1687", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1687);
                this.columnD1699 = new global::System.Data.DataColumn("D1699", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1699);
                this.columnD1684 = new global::System.Data.DataColumn("D1684", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1684);
                this.columnD1691 = new global::System.Data.DataColumn("D1691", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1691);
                this.columnD1694 = new global::System.Data.DataColumn("D1694", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1694);
                this.columnD1697 = new global::System.Data.DataColumn("D1697", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1697);
                this.columnSORTID = new global::System.Data.DataColumn("SORTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTID);
                this.columnD1689 = new global::System.Data.DataColumn("D1689", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1689);
                this.columnD1692 = new global::System.Data.DataColumn("D1692", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD1692);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnD0107,
                                this.columnD1601A}, true));
                this.columnD0107.AllowDBNull = false;
                this.columnD0107.MaxLength = 68;
                this.columnD1601.MaxLength = 5;
                this.columnD1601A.AllowDBNull = false;
                this.columnD1601A.MaxLength = 70;
                this.columnD1624.MaxLength = 9;
                this.columnD1631.MaxLength = 9;
                this.columnD1634.MaxLength = 9;
                this.columnD1660.MaxLength = 9;
                this.columnD1661.MaxLength = 9;
                this.columnD1664.MaxLength = 9;
                this.columnD1671.MaxLength = 9;
                this.columnD1674.MaxLength = 9;
                this.columnD1677.MaxLength = 9;
                this.columnD1681.MaxLength = 9;
                this.columnD1687.MaxLength = 9;
                this.columnD1699.MaxLength = 9;
                this.columnD1684.MaxLength = 1;
                this.columnD1689.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16Row NewD16Row() {
                return ((D16Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new D16Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(D16Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.D16RowChanged != null)) {
                    this.D16RowChanged(this, new D16RowChangeEvent(((D16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.D16RowChanging != null)) {
                    this.D16RowChanging(this, new D16RowChangeEvent(((D16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.D16RowDeleted != null)) {
                    this.D16RowDeleted(this, new D16RowChangeEvent(((D16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.D16RowDeleting != null)) {
                    this.D16RowDeleting(this, new D16RowChangeEvent(((D16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveD16Row(D16Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "D16DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.TypedTableBase<UserRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnUSERNAME;
            
            private global::System.Data.DataColumn columnPASSWORD;
            
            private global::System.Data.DataColumn columnENABLED;
            
            private global::System.Data.DataColumn columnSYS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERNAMEColumn {
                get {
                    return this.columnUSERNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PASSWORDColumn {
                get {
                    return this.columnPASSWORD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENABLEDColumn {
                get {
                    return this.columnENABLED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SYSColumn {
                get {
                    return this.columnSYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(string ID, string USERNAME, string PASSWORD, string ENABLED, string SYS) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        USERNAME,
                        PASSWORD,
                        ENABLED,
                        SYS};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByID(string ID) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnUSERNAME = base.Columns["USERNAME"];
                this.columnPASSWORD = base.Columns["PASSWORD"];
                this.columnENABLED = base.Columns["ENABLED"];
                this.columnSYS = base.Columns["SYS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnUSERNAME = new global::System.Data.DataColumn("USERNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERNAME);
                this.columnPASSWORD = new global::System.Data.DataColumn("PASSWORD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASSWORD);
                this.columnENABLED = new global::System.Data.DataColumn("ENABLED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENABLED);
                this.columnSYS = new global::System.Data.DataColumn("SYS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.MaxLength = 50;
                this.columnUSERNAME.AllowDBNull = false;
                this.columnUSERNAME.MaxLength = 50;
                this.columnPASSWORD.AllowDBNull = false;
                this.columnPASSWORD.MaxLength = 50;
                this.columnENABLED.AllowDBNull = false;
                this.columnENABLED.MaxLength = 8190;
                this.columnSYS.MaxLength = 8190;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Dict_TableDataTable : global::System.Data.TypedTableBase<Dict_TableRow> {
            
            private global::System.Data.DataColumn columnINFOGROUP;
            
            private global::System.Data.DataColumn columnTNAME;
            
            private global::System.Data.DataColumn columnCAPTION;
            
            private global::System.Data.DataColumn columnREMARKS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_TableDataTable() {
                this.TableName = "Dict_Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Dict_TableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Dict_TableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INFOGROUPColumn {
                get {
                    return this.columnINFOGROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TNAMEColumn {
                get {
                    return this.columnTNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAPTIONColumn {
                get {
                    return this.columnCAPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REMARKSColumn {
                get {
                    return this.columnREMARKS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_TableRow this[int index] {
                get {
                    return ((Dict_TableRow)(this.Rows[index]));
                }
            }
            
            public event Dict_TableRowChangeEventHandler Dict_TableRowChanging;
            
            public event Dict_TableRowChangeEventHandler Dict_TableRowChanged;
            
            public event Dict_TableRowChangeEventHandler Dict_TableRowDeleting;
            
            public event Dict_TableRowChangeEventHandler Dict_TableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDict_TableRow(Dict_TableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_TableRow AddDict_TableRow(string INFOGROUP, string TNAME, string CAPTION, string REMARKS) {
                Dict_TableRow rowDict_TableRow = ((Dict_TableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INFOGROUP,
                        TNAME,
                        CAPTION,
                        REMARKS};
                rowDict_TableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDict_TableRow);
                return rowDict_TableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Dict_TableDataTable cln = ((Dict_TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Dict_TableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnINFOGROUP = base.Columns["INFOGROUP"];
                this.columnTNAME = base.Columns["TNAME"];
                this.columnCAPTION = base.Columns["CAPTION"];
                this.columnREMARKS = base.Columns["REMARKS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnINFOGROUP = new global::System.Data.DataColumn("INFOGROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFOGROUP);
                this.columnTNAME = new global::System.Data.DataColumn("TNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTNAME);
                this.columnCAPTION = new global::System.Data.DataColumn("CAPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAPTION);
                this.columnREMARKS = new global::System.Data.DataColumn("REMARKS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMARKS);
                this.columnINFOGROUP.MaxLength = 8190;
                this.columnTNAME.MaxLength = 8190;
                this.columnCAPTION.MaxLength = 8190;
                this.columnREMARKS.MaxLength = 8190;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_TableRow NewDict_TableRow() {
                return ((Dict_TableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Dict_TableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Dict_TableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Dict_TableRowChanged != null)) {
                    this.Dict_TableRowChanged(this, new Dict_TableRowChangeEvent(((Dict_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Dict_TableRowChanging != null)) {
                    this.Dict_TableRowChanging(this, new Dict_TableRowChangeEvent(((Dict_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Dict_TableRowDeleted != null)) {
                    this.Dict_TableRowDeleted(this, new Dict_TableRowChangeEvent(((Dict_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Dict_TableRowDeleting != null)) {
                    this.Dict_TableRowDeleting(this, new Dict_TableRowChangeEvent(((Dict_TableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDict_TableRow(Dict_TableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Dict_TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Dict_ColumnDataTable : global::System.Data.TypedTableBase<Dict_ColumnRow> {
            
            private global::System.Data.DataColumn columnCNAME;
            
            private global::System.Data.DataColumn columnTNAME;
            
            private global::System.Data.DataColumn columnCAPTION;
            
            private global::System.Data.DataColumn columnREFTABLE;
            
            private global::System.Data.DataColumn columnREFCOL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_ColumnDataTable() {
                this.TableName = "Dict_Column";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Dict_ColumnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Dict_ColumnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CNAMEColumn {
                get {
                    return this.columnCNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TNAMEColumn {
                get {
                    return this.columnTNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAPTIONColumn {
                get {
                    return this.columnCAPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REFTABLEColumn {
                get {
                    return this.columnREFTABLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REFCOLColumn {
                get {
                    return this.columnREFCOL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_ColumnRow this[int index] {
                get {
                    return ((Dict_ColumnRow)(this.Rows[index]));
                }
            }
            
            public event Dict_ColumnRowChangeEventHandler Dict_ColumnRowChanging;
            
            public event Dict_ColumnRowChangeEventHandler Dict_ColumnRowChanged;
            
            public event Dict_ColumnRowChangeEventHandler Dict_ColumnRowDeleting;
            
            public event Dict_ColumnRowChangeEventHandler Dict_ColumnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDict_ColumnRow(Dict_ColumnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_ColumnRow AddDict_ColumnRow(string CNAME, string TNAME, string CAPTION, string REFTABLE, string REFCOL) {
                Dict_ColumnRow rowDict_ColumnRow = ((Dict_ColumnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CNAME,
                        TNAME,
                        CAPTION,
                        REFTABLE,
                        REFCOL};
                rowDict_ColumnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDict_ColumnRow);
                return rowDict_ColumnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Dict_ColumnDataTable cln = ((Dict_ColumnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Dict_ColumnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCNAME = base.Columns["CNAME"];
                this.columnTNAME = base.Columns["TNAME"];
                this.columnCAPTION = base.Columns["CAPTION"];
                this.columnREFTABLE = base.Columns["REFTABLE"];
                this.columnREFCOL = base.Columns["REFCOL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCNAME = new global::System.Data.DataColumn("CNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCNAME);
                this.columnTNAME = new global::System.Data.DataColumn("TNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTNAME);
                this.columnCAPTION = new global::System.Data.DataColumn("CAPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAPTION);
                this.columnREFTABLE = new global::System.Data.DataColumn("REFTABLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFTABLE);
                this.columnREFCOL = new global::System.Data.DataColumn("REFCOL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFCOL);
                this.columnCNAME.MaxLength = 8190;
                this.columnTNAME.MaxLength = 8190;
                this.columnCAPTION.MaxLength = 8190;
                this.columnREFTABLE.MaxLength = 8190;
                this.columnREFCOL.MaxLength = 8190;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_ColumnRow NewDict_ColumnRow() {
                return ((Dict_ColumnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Dict_ColumnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Dict_ColumnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Dict_ColumnRowChanged != null)) {
                    this.Dict_ColumnRowChanged(this, new Dict_ColumnRowChangeEvent(((Dict_ColumnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Dict_ColumnRowChanging != null)) {
                    this.Dict_ColumnRowChanging(this, new Dict_ColumnRowChangeEvent(((Dict_ColumnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Dict_ColumnRowDeleted != null)) {
                    this.Dict_ColumnRowDeleted(this, new Dict_ColumnRowChangeEvent(((Dict_ColumnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Dict_ColumnRowDeleting != null)) {
                    this.Dict_ColumnRowDeleting(this, new Dict_ColumnRowChangeEvent(((Dict_ColumnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDict_ColumnRow(Dict_ColumnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Dict_ColumnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class A01Row : global::System.Data.DataRow {
            
            private A01DataTable tableA01;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal A01Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableA01 = ((A01DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0000 {
                get {
                    return ((string)(this[this.tableA01.A0000Column]));
                }
                set {
                    this[this.tableA01.A0000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0101 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0101Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0101”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0101Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0104 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0104Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0104”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0104Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0107 {
                get {
                    return ((string)(this[this.tableA01.A0107Column]));
                }
                set {
                    this[this.tableA01.A0107Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0107A {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0107AColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0107A”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0107AColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0111 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0111Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0111”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0111Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0117 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0117Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0117”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0117Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0134 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0134Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0134”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0134Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0141 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0141Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0141”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0141Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0159 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0159Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0159”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0159Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0160 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0160Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0160”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0160Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0162 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0162Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0162”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0162Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0184 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0184Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0184”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0184Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AKKY {
                get {
                    try {
                        return ((string)(this[this.tableA01.AKKYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“AKKY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.AKKYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0198A {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0198AColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0198A”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0198AColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0198B {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0198BColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0198B”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0198BColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0198C {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0198CColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0198C”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0198CColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SORTID {
                get {
                    try {
                        return ((int)(this[this.tableA01.SORTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“SORTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.SORTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double A0193 {
                get {
                    try {
                        return ((double)(this[this.tableA01.A0193Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0193”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0193Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0121 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0121Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0121”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0121Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0124 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0124Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0124”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0124Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0181 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0181Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0181”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0181Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string A0144 {
                get {
                    try {
                        return ((string)(this[this.tableA01.A0144Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“A01”中列“A0144”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableA01.A0144Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0101Null() {
                return this.IsNull(this.tableA01.A0101Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0101Null() {
                this[this.tableA01.A0101Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0104Null() {
                return this.IsNull(this.tableA01.A0104Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0104Null() {
                this[this.tableA01.A0104Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0107ANull() {
                return this.IsNull(this.tableA01.A0107AColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0107ANull() {
                this[this.tableA01.A0107AColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0111Null() {
                return this.IsNull(this.tableA01.A0111Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0111Null() {
                this[this.tableA01.A0111Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0117Null() {
                return this.IsNull(this.tableA01.A0117Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0117Null() {
                this[this.tableA01.A0117Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0134Null() {
                return this.IsNull(this.tableA01.A0134Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0134Null() {
                this[this.tableA01.A0134Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0141Null() {
                return this.IsNull(this.tableA01.A0141Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0141Null() {
                this[this.tableA01.A0141Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0159Null() {
                return this.IsNull(this.tableA01.A0159Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0159Null() {
                this[this.tableA01.A0159Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0160Null() {
                return this.IsNull(this.tableA01.A0160Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0160Null() {
                this[this.tableA01.A0160Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0162Null() {
                return this.IsNull(this.tableA01.A0162Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0162Null() {
                this[this.tableA01.A0162Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0184Null() {
                return this.IsNull(this.tableA01.A0184Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0184Null() {
                this[this.tableA01.A0184Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAKKYNull() {
                return this.IsNull(this.tableA01.AKKYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAKKYNull() {
                this[this.tableA01.AKKYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0198ANull() {
                return this.IsNull(this.tableA01.A0198AColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0198ANull() {
                this[this.tableA01.A0198AColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0198BNull() {
                return this.IsNull(this.tableA01.A0198BColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0198BNull() {
                this[this.tableA01.A0198BColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0198CNull() {
                return this.IsNull(this.tableA01.A0198CColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0198CNull() {
                this[this.tableA01.A0198CColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSORTIDNull() {
                return this.IsNull(this.tableA01.SORTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSORTIDNull() {
                this[this.tableA01.SORTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0193Null() {
                return this.IsNull(this.tableA01.A0193Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0193Null() {
                this[this.tableA01.A0193Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0121Null() {
                return this.IsNull(this.tableA01.A0121Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0121Null() {
                this[this.tableA01.A0121Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0124Null() {
                return this.IsNull(this.tableA01.A0124Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0124Null() {
                this[this.tableA01.A0124Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0181Null() {
                return this.IsNull(this.tableA01.A0181Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0181Null() {
                this[this.tableA01.A0181Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsA0144Null() {
                return this.IsNull(this.tableA01.A0144Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetA0144Null() {
                this[this.tableA01.A0144Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class D01Row : global::System.Data.DataRow {
            
            private D01DataTable tableD01;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal D01Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableD01 = ((D01DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0101 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0101Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0101”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0101Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0107 {
                get {
                    return ((string)(this[this.tableD01.D0107Column]));
                }
                set {
                    this[this.tableD01.D0107Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0111 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0111Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0111”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0111Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0121 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0121Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0121”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0121Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0123 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0123Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0123”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0123Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0127 {
                get {
                    return ((string)(this[this.tableD01.D0127Column]));
                }
                set {
                    this[this.tableD01.D0127Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0127A {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0127AColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0127A”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0127AColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0144 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0144Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0144”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0144Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0165 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0165Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0165”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0165Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0168 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0168Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0168”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0168Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0171 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0171Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0171”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0171Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0174 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0174Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0174”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0174Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0177 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0177Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0177”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0177Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0181 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0181Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0181”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0181Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0184 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0184Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0184”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0184Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SORTID {
                get {
                    try {
                        return ((string)(this[this.tableD01.SORTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“SORTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.SORTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0191 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0191Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0191”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0191Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0199 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0199Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0199”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0199Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int D0179 {
                get {
                    try {
                        return ((int)(this[this.tableD01.D0179Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0179”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0179Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0193 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0193Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0193”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0193Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0194 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0194Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0194”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0194Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int D0178 {
                get {
                    try {
                        return ((int)(this[this.tableD01.D0178Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0178”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0178Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0192 {
                get {
                    try {
                        return ((string)(this[this.tableD01.D0192Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D01”中列“D0192”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD01.D0192Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0101Null() {
                return this.IsNull(this.tableD01.D0101Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0101Null() {
                this[this.tableD01.D0101Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0111Null() {
                return this.IsNull(this.tableD01.D0111Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0111Null() {
                this[this.tableD01.D0111Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0121Null() {
                return this.IsNull(this.tableD01.D0121Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0121Null() {
                this[this.tableD01.D0121Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0123Null() {
                return this.IsNull(this.tableD01.D0123Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0123Null() {
                this[this.tableD01.D0123Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0127ANull() {
                return this.IsNull(this.tableD01.D0127AColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0127ANull() {
                this[this.tableD01.D0127AColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0144Null() {
                return this.IsNull(this.tableD01.D0144Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0144Null() {
                this[this.tableD01.D0144Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0165Null() {
                return this.IsNull(this.tableD01.D0165Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0165Null() {
                this[this.tableD01.D0165Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0168Null() {
                return this.IsNull(this.tableD01.D0168Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0168Null() {
                this[this.tableD01.D0168Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0171Null() {
                return this.IsNull(this.tableD01.D0171Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0171Null() {
                this[this.tableD01.D0171Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0174Null() {
                return this.IsNull(this.tableD01.D0174Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0174Null() {
                this[this.tableD01.D0174Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0177Null() {
                return this.IsNull(this.tableD01.D0177Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0177Null() {
                this[this.tableD01.D0177Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0181Null() {
                return this.IsNull(this.tableD01.D0181Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0181Null() {
                this[this.tableD01.D0181Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0184Null() {
                return this.IsNull(this.tableD01.D0184Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0184Null() {
                this[this.tableD01.D0184Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSORTIDNull() {
                return this.IsNull(this.tableD01.SORTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSORTIDNull() {
                this[this.tableD01.SORTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0191Null() {
                return this.IsNull(this.tableD01.D0191Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0191Null() {
                this[this.tableD01.D0191Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0199Null() {
                return this.IsNull(this.tableD01.D0199Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0199Null() {
                this[this.tableD01.D0199Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0179Null() {
                return this.IsNull(this.tableD01.D0179Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0179Null() {
                this[this.tableD01.D0179Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0193Null() {
                return this.IsNull(this.tableD01.D0193Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0193Null() {
                this[this.tableD01.D0193Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0194Null() {
                return this.IsNull(this.tableD01.D0194Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0194Null() {
                this[this.tableD01.D0194Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0178Null() {
                return this.IsNull(this.tableD01.D0178Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0178Null() {
                this[this.tableD01.D0178Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD0192Null() {
                return this.IsNull(this.tableD01.D0192Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD0192Null() {
                this[this.tableD01.D0192Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class D16Row : global::System.Data.DataRow {
            
            private D16DataTable tableD16;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal D16Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableD16 = ((D16DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D0107 {
                get {
                    return ((string)(this[this.tableD16.D0107Column]));
                }
                set {
                    this[this.tableD16.D0107Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1601 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1601Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1601”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1601Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1601A {
                get {
                    return ((string)(this[this.tableD16.D1601AColumn]));
                }
                set {
                    this[this.tableD16.D1601AColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1624 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1624Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1624”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1624Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1631 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1631Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1631”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1631Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1634 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1634Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1634”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1634Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1660 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1660Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1660”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1660Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1661 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1661Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1661”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1661Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1664 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1664Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1664”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1664Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1671 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1671Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1671”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1671Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1674 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1674Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1674”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1674Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1677 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1677Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1677”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1677Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1681 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1681Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1681”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1681Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1687 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1687Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1687”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1687Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1699 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1699Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1699”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1699Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1684 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1684Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1684”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1684Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int D1691 {
                get {
                    try {
                        return ((int)(this[this.tableD16.D1691Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1691”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1691Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int D1694 {
                get {
                    try {
                        return ((int)(this[this.tableD16.D1694Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1694”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1694Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int D1697 {
                get {
                    try {
                        return ((int)(this[this.tableD16.D1697Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1697”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1697Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SORTID {
                get {
                    try {
                        return ((int)(this[this.tableD16.SORTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“SORTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.SORTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D1689 {
                get {
                    try {
                        return ((string)(this[this.tableD16.D1689Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1689”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1689Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int D1692 {
                get {
                    try {
                        return ((int)(this[this.tableD16.D1692Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“D16”中列“D1692”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableD16.D1692Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1601Null() {
                return this.IsNull(this.tableD16.D1601Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1601Null() {
                this[this.tableD16.D1601Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1624Null() {
                return this.IsNull(this.tableD16.D1624Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1624Null() {
                this[this.tableD16.D1624Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1631Null() {
                return this.IsNull(this.tableD16.D1631Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1631Null() {
                this[this.tableD16.D1631Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1634Null() {
                return this.IsNull(this.tableD16.D1634Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1634Null() {
                this[this.tableD16.D1634Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1660Null() {
                return this.IsNull(this.tableD16.D1660Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1660Null() {
                this[this.tableD16.D1660Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1661Null() {
                return this.IsNull(this.tableD16.D1661Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1661Null() {
                this[this.tableD16.D1661Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1664Null() {
                return this.IsNull(this.tableD16.D1664Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1664Null() {
                this[this.tableD16.D1664Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1671Null() {
                return this.IsNull(this.tableD16.D1671Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1671Null() {
                this[this.tableD16.D1671Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1674Null() {
                return this.IsNull(this.tableD16.D1674Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1674Null() {
                this[this.tableD16.D1674Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1677Null() {
                return this.IsNull(this.tableD16.D1677Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1677Null() {
                this[this.tableD16.D1677Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1681Null() {
                return this.IsNull(this.tableD16.D1681Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1681Null() {
                this[this.tableD16.D1681Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1687Null() {
                return this.IsNull(this.tableD16.D1687Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1687Null() {
                this[this.tableD16.D1687Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1699Null() {
                return this.IsNull(this.tableD16.D1699Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1699Null() {
                this[this.tableD16.D1699Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1684Null() {
                return this.IsNull(this.tableD16.D1684Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1684Null() {
                this[this.tableD16.D1684Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1691Null() {
                return this.IsNull(this.tableD16.D1691Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1691Null() {
                this[this.tableD16.D1691Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1694Null() {
                return this.IsNull(this.tableD16.D1694Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1694Null() {
                this[this.tableD16.D1694Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1697Null() {
                return this.IsNull(this.tableD16.D1697Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1697Null() {
                this[this.tableD16.D1697Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSORTIDNull() {
                return this.IsNull(this.tableD16.SORTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSORTIDNull() {
                this[this.tableD16.SORTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1689Null() {
                return this.IsNull(this.tableD16.D1689Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1689Null() {
                this[this.tableD16.D1689Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD1692Null() {
                return this.IsNull(this.tableD16.D1692Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD1692Null() {
                this[this.tableD16.D1692Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableUser.IDColumn]));
                }
                set {
                    this[this.tableUser.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USERNAME {
                get {
                    return ((string)(this[this.tableUser.USERNAMEColumn]));
                }
                set {
                    this[this.tableUser.USERNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASSWORD {
                get {
                    return ((string)(this[this.tableUser.PASSWORDColumn]));
                }
                set {
                    this[this.tableUser.PASSWORDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENABLED {
                get {
                    return ((string)(this[this.tableUser.ENABLEDColumn]));
                }
                set {
                    this[this.tableUser.ENABLEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SYS {
                get {
                    try {
                        return ((string)(this[this.tableUser.SYSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“User”中列“SYS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.SYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSYSNull() {
                return this.IsNull(this.tableUser.SYSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSYSNull() {
                this[this.tableUser.SYSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Dict_TableRow : global::System.Data.DataRow {
            
            private Dict_TableDataTable tableDict_Table;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Dict_TableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDict_Table = ((Dict_TableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INFOGROUP {
                get {
                    try {
                        return ((string)(this[this.tableDict_Table.INFOGROUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Table”中列“INFOGROUP”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Table.INFOGROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TNAME {
                get {
                    try {
                        return ((string)(this[this.tableDict_Table.TNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Table”中列“TNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Table.TNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAPTION {
                get {
                    try {
                        return ((string)(this[this.tableDict_Table.CAPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Table”中列“CAPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Table.CAPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REMARKS {
                get {
                    try {
                        return ((string)(this[this.tableDict_Table.REMARKSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Table”中列“REMARKS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Table.REMARKSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINFOGROUPNull() {
                return this.IsNull(this.tableDict_Table.INFOGROUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINFOGROUPNull() {
                this[this.tableDict_Table.INFOGROUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTNAMENull() {
                return this.IsNull(this.tableDict_Table.TNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTNAMENull() {
                this[this.tableDict_Table.TNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAPTIONNull() {
                return this.IsNull(this.tableDict_Table.CAPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAPTIONNull() {
                this[this.tableDict_Table.CAPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREMARKSNull() {
                return this.IsNull(this.tableDict_Table.REMARKSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREMARKSNull() {
                this[this.tableDict_Table.REMARKSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Dict_ColumnRow : global::System.Data.DataRow {
            
            private Dict_ColumnDataTable tableDict_Column;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Dict_ColumnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDict_Column = ((Dict_ColumnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CNAME {
                get {
                    try {
                        return ((string)(this[this.tableDict_Column.CNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Column”中列“CNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Column.CNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TNAME {
                get {
                    try {
                        return ((string)(this[this.tableDict_Column.TNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Column”中列“TNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Column.TNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAPTION {
                get {
                    try {
                        return ((string)(this[this.tableDict_Column.CAPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Column”中列“CAPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Column.CAPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REFTABLE {
                get {
                    try {
                        return ((string)(this[this.tableDict_Column.REFTABLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Column”中列“REFTABLE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Column.REFTABLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REFCOL {
                get {
                    try {
                        return ((string)(this[this.tableDict_Column.REFCOLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Dict_Column”中列“REFCOL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDict_Column.REFCOLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCNAMENull() {
                return this.IsNull(this.tableDict_Column.CNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCNAMENull() {
                this[this.tableDict_Column.CNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTNAMENull() {
                return this.IsNull(this.tableDict_Column.TNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTNAMENull() {
                this[this.tableDict_Column.TNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAPTIONNull() {
                return this.IsNull(this.tableDict_Column.CAPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAPTIONNull() {
                this[this.tableDict_Column.CAPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREFTABLENull() {
                return this.IsNull(this.tableDict_Column.REFTABLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREFTABLENull() {
                this[this.tableDict_Column.REFTABLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREFCOLNull() {
                return this.IsNull(this.tableDict_Column.REFCOLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREFCOLNull() {
                this[this.tableDict_Column.REFCOLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class A01RowChangeEvent : global::System.EventArgs {
            
            private A01Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01RowChangeEvent(A01Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public A01Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class D01RowChangeEvent : global::System.EventArgs {
            
            private D01Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01RowChangeEvent(D01Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D01Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class D16RowChangeEvent : global::System.EventArgs {
            
            private D16Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16RowChangeEvent(D16Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public D16Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Dict_TableRowChangeEvent : global::System.EventArgs {
            
            private Dict_TableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_TableRowChangeEvent(Dict_TableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Dict_ColumnRowChangeEvent : global::System.EventArgs {
            
            private Dict_ColumnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_ColumnRowChangeEvent(Dict_ColumnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dict_ColumnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace com.echo.XT2007.MyDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class A01TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public A01TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "A01";
            tableMapping.ColumnMappings.Add("A0000", "A0000");
            tableMapping.ColumnMappings.Add("A0101", "A0101");
            tableMapping.ColumnMappings.Add("A0104", "A0104");
            tableMapping.ColumnMappings.Add("A0107", "A0107");
            tableMapping.ColumnMappings.Add("A0107A", "A0107A");
            tableMapping.ColumnMappings.Add("A0111", "A0111");
            tableMapping.ColumnMappings.Add("A0117", "A0117");
            tableMapping.ColumnMappings.Add("A0134", "A0134");
            tableMapping.ColumnMappings.Add("A0141", "A0141");
            tableMapping.ColumnMappings.Add("A0159", "A0159");
            tableMapping.ColumnMappings.Add("A0160", "A0160");
            tableMapping.ColumnMappings.Add("A0162", "A0162");
            tableMapping.ColumnMappings.Add("A0184", "A0184");
            tableMapping.ColumnMappings.Add("AKKY", "AKKY");
            tableMapping.ColumnMappings.Add("A0198A", "A0198A");
            tableMapping.ColumnMappings.Add("A0198B", "A0198B");
            tableMapping.ColumnMappings.Add("A0198C", "A0198C");
            tableMapping.ColumnMappings.Add("SORTID", "SORTID");
            tableMapping.ColumnMappings.Add("A0193", "A0193");
            tableMapping.ColumnMappings.Add("A0121", "A0121");
            tableMapping.ColumnMappings.Add("A0124", "A0124");
            tableMapping.ColumnMappings.Add("A0181", "A0181");
            tableMapping.ColumnMappings.Add("A0144", "A0144");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::com.echo.XT2007.Properties.Settings.Default.XT2007ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM \"PUBLIC\".\"A01\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.A01DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.A01DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.A01DataTable dataTable = new MyDataSet.A01DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class D01TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public D01TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "D01";
            tableMapping.ColumnMappings.Add("D0101", "D0101");
            tableMapping.ColumnMappings.Add("D0107", "D0107");
            tableMapping.ColumnMappings.Add("D0111", "D0111");
            tableMapping.ColumnMappings.Add("D0121", "D0121");
            tableMapping.ColumnMappings.Add("D0123", "D0123");
            tableMapping.ColumnMappings.Add("D0127", "D0127");
            tableMapping.ColumnMappings.Add("D0127A", "D0127A");
            tableMapping.ColumnMappings.Add("D0144", "D0144");
            tableMapping.ColumnMappings.Add("D0165", "D0165");
            tableMapping.ColumnMappings.Add("D0168", "D0168");
            tableMapping.ColumnMappings.Add("D0171", "D0171");
            tableMapping.ColumnMappings.Add("D0174", "D0174");
            tableMapping.ColumnMappings.Add("D0177", "D0177");
            tableMapping.ColumnMappings.Add("D0181", "D0181");
            tableMapping.ColumnMappings.Add("D0184", "D0184");
            tableMapping.ColumnMappings.Add("SORTID", "SORTID");
            tableMapping.ColumnMappings.Add("D0191", "D0191");
            tableMapping.ColumnMappings.Add("D0199", "D0199");
            tableMapping.ColumnMappings.Add("D0179", "D0179");
            tableMapping.ColumnMappings.Add("D0193", "D0193");
            tableMapping.ColumnMappings.Add("D0194", "D0194");
            tableMapping.ColumnMappings.Add("D0178", "D0178");
            tableMapping.ColumnMappings.Add("D0192", "D0192");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::com.echo.XT2007.Properties.Settings.Default.XT2007ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM \"PUBLIC\".\"D01\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.D01DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.D01DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.D01DataTable dataTable = new MyDataSet.D01DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class D16TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public D16TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "D16";
            tableMapping.ColumnMappings.Add("D0107", "D0107");
            tableMapping.ColumnMappings.Add("D1601", "D1601");
            tableMapping.ColumnMappings.Add("D1601A", "D1601A");
            tableMapping.ColumnMappings.Add("D1624", "D1624");
            tableMapping.ColumnMappings.Add("D1631", "D1631");
            tableMapping.ColumnMappings.Add("D1634", "D1634");
            tableMapping.ColumnMappings.Add("D1660", "D1660");
            tableMapping.ColumnMappings.Add("D1661", "D1661");
            tableMapping.ColumnMappings.Add("D1664", "D1664");
            tableMapping.ColumnMappings.Add("D1671", "D1671");
            tableMapping.ColumnMappings.Add("D1674", "D1674");
            tableMapping.ColumnMappings.Add("D1677", "D1677");
            tableMapping.ColumnMappings.Add("D1681", "D1681");
            tableMapping.ColumnMappings.Add("D1687", "D1687");
            tableMapping.ColumnMappings.Add("D1699", "D1699");
            tableMapping.ColumnMappings.Add("D1684", "D1684");
            tableMapping.ColumnMappings.Add("D1691", "D1691");
            tableMapping.ColumnMappings.Add("D1694", "D1694");
            tableMapping.ColumnMappings.Add("D1697", "D1697");
            tableMapping.ColumnMappings.Add("SORTID", "SORTID");
            tableMapping.ColumnMappings.Add("D1689", "D1689");
            tableMapping.ColumnMappings.Add("D1692", "D1692");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::com.echo.XT2007.Properties.Settings.Default.XT2007ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM \"PUBLIC\".\"D16\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.D16DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.D16DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.D16DataTable dataTable = new MyDataSet.D16DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "User";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME");
            tableMapping.ColumnMappings.Add("PASSWORD", "PASSWORD");
            tableMapping.ColumnMappings.Add("ENABLED", "ENABLED");
            tableMapping.ColumnMappings.Add("SYS", "SYS");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::com.echo.XT2007.Properties.Settings.Default.XT2007ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM \"PUBLIC\".\"USERS\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.UserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.UserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.UserDataTable dataTable = new MyDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Dict_TableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Dict_TableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Dict_Table";
            tableMapping.ColumnMappings.Add("INFOGROUP", "INFOGROUP");
            tableMapping.ColumnMappings.Add("TNAME", "TNAME");
            tableMapping.ColumnMappings.Add("CAPTION", "CAPTION");
            tableMapping.ColumnMappings.Add("REMARKS", "REMARKS");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::com.echo.XT2007.Properties.Settings.Default.XT2007ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[2];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM \"PUBLIC\".\"T_DICT_TABLE\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT   Tname, caption, infogroup, remarks\r\nFROM      XT2007.\"PUBLIC\".T_DICT_TAB" +
                "LE\r\nWHERE   (infogroup IN (\'A\', \'C\', \'D\'))\r\nORDER BY Tname";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.Dict_TableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.Dict_TableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.Dict_TableDataTable dataTable = new MyDataSet.Dict_TableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByTName(MyDataSet.Dict_TableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyDataSet.Dict_TableDataTable GetDataByTname() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MyDataSet.Dict_TableDataTable dataTable = new MyDataSet.Dict_TableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Dict_ColumnTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private global::System.Data.Odbc.OdbcConnection _connection;
        
        private global::System.Data.Odbc.OdbcTransaction _transaction;
        
        private global::System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Dict_ColumnTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.Odbc.OdbcTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.Odbc.OdbcDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Dict_Column";
            tableMapping.ColumnMappings.Add("CNAME", "CNAME");
            tableMapping.ColumnMappings.Add("TNAME", "TNAME");
            tableMapping.ColumnMappings.Add("CAPTION", "CAPTION");
            tableMapping.ColumnMappings.Add("REFTABLE", "REFTABLE");
            tableMapping.ColumnMappings.Add("REFCOL", "REFCOL");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::com.echo.XT2007.Properties.Settings.Default.XT2007ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.Odbc.OdbcCommand[2];
            this._commandCollection[0] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT   CNAME, TNAME, CAPTION, REFTABLE, REFCOL\r\nFROM      XT2007.\"PUBLIC\".T_DIC" +
                "T_COLUMN";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.Odbc.OdbcCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT   CNAME, TNAME, CAPTION, REFTABLE, REFCOL\r\nFROM      XT2007.\"PUBLIC\".T_DIC" +
                "T_COLUMN\r\nWHERE   (TNAME = ?)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.Odbc.OdbcParameter("tName", global::System.Data.Odbc.OdbcType.NVarChar, 1024, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TNAME", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.Dict_ColumnDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.Dict_ColumnDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.Dict_ColumnDataTable dataTable = new MyDataSet.Dict_ColumnDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByTName(MyDataSet.Dict_ColumnDataTable dataTable, string tName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tName == null)) {
                throw new global::System.ArgumentNullException("tName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyDataSet.Dict_ColumnDataTable GetDataByTName(string tName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tName == null)) {
                throw new global::System.ArgumentNullException("tName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tName));
            }
            MyDataSet.Dict_ColumnDataTable dataTable = new MyDataSet.Dict_ColumnDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(MyDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(MyDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(MyDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(MyDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591